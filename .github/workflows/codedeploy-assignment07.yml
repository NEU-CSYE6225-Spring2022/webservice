# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: CodeDeploy-Assignment-07-Branch

env:
  ARTIFACT_NAME: csye6225-webapp-${{ github.sha }}.zip
  CODE_DEPLOY_APPLICATION_NAME: webapp
  CODE_DEPLOY_APPLICATION_DEPLOYMENT_GROUP_NAME: webapp
  AWS_REGION: us-east-1

on:
  push:
    branches: [ assignment-07 ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - name: Checking out code
      uses: actions/checkout@v2

    - name: Setting up Hashicorp Packer
      uses: hashicorp-contrib/setup-packer@v1
      with:
        packer-version: 1.7.10

    - name: Set up JDK
      uses: actions/setup-java@v2
      with:
        distribution: 'temurin'
        java-version: '17'

    - name: Running test cases on featureBranch
      working-directory: springdemo
      run: mvn test

    - name: Building Jar file
      working-directory: springdemo
      run: mvn package -Dmaven.test.skip=true

    - name: Checking AWS credentials for DEV
      uses: aws-actions/configure-aws-credentials@v1
      with: 
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
    
    - name: Setting packer logs to Verbose
      run: export PACKER_LOG=1

    - name: Installing packer provisioners
      run: packer init aws-linux2.pkr.hcl

    - name: Running Packer template validation
      run: packer validate aws-linux2.pkr.hcl
    
    - name: Printing the contents of Directory before Packer build
      run: ls -l

    - name: Building Packer Template
      run: packer build aws-linux2.pkr.hcl

    - name: Printing the contents of Directory
      run: ls -l
    
    - name: Printing contents of Manifest
      run: cat manifest.json

    - name: Build Artifact for CodeDeploy
      run: |
        mkdir codeDeployArtifact
        zip -r ${{ env.ARTIFACT_NAME }} springdemo/target/springdemo-0.0.1-SNAPSHOT.jar codedeploy/*.sh appspec.yml 
        pwd
        ls -al
        mv ${{ env.ARTIFACT_NAME }} codeDeployArtifact/
        cd codeDeployArtifact
        ls -al
    
    - name: Checking AWS credentials for PROD
      uses: aws-actions/configure-aws-credentials@v1
      with: 
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}
        aws-region: us-east-1

    - name: Pushing Artifact to S3
      working-directory: codeDeployArtifact
      run: | 
        aws s3 sync . s3://${{ secrets.S3_CODEDEPLOY_BUCKET }}
    
    - name: Calling Code Deploy API
      run: |
        output=$(aws deploy create-deployment    \
          --application-name ${{ env.CODE_DEPLOY_APPLICATION_NAME }}  \
          --deployment-config-name CodeDeployDefault.AllAtOnce    \
          --deployment-group-name ${{ env.CODE_DEPLOY_APPLICATION_DEPLOYMENT_GROUP_NAME }}    \
          --description "CSYE6225 - CodeDeploy"   \
          --s3-location bucket=${{ secrets.S3_CODEDEPLOY_BUCKET }},key=${{ env.ARTIFACT_NAME }},bundleType=zip   \
          --region ${{ env.AWS_REGION }}   \
          --output json)
        
        echo $output
        dId=$(echo $output | jq -r '.deploymentId')
        aws deploy wait deployment-successful --deployment-id $dId